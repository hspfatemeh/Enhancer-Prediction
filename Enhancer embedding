{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9506892,"sourceType":"datasetVersion","datasetId":5786384}],"dockerImageVersionId":30775,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import re\nimport random\nimport gzip\nimport json","metadata":{"execution":{"iopub.status.busy":"2024-09-29T09:25:46.192048Z","iopub.execute_input":"2024-09-29T09:25:46.192360Z","iopub.status.idle":"2024-09-29T09:25:46.220359Z","shell.execute_reply.started":"2024-09-29T09:25:46.192323Z","shell.execute_reply":"2024-09-29T09:25:46.219452Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"def deleteLine(source,newfile):\n\n    file1 = open(source,'r')\n    file2 = open(newfile,'w')\n\n    for line in file1.readlines():\n\n# reading all lines that begin \n        x = re.findall(\"^>chr\", line)\n        if not x:\n            file2.write(line)\n\n     # close and save the files\n    file1.close()\n    file2.close()\n    print(\"done\")","metadata":{"execution":{"iopub.status.busy":"2024-09-29T09:25:46.221610Z","iopub.execute_input":"2024-09-29T09:25:46.221923Z","iopub.status.idle":"2024-09-29T09:25:46.228966Z","shell.execute_reply.started":"2024-09-29T09:25:46.221890Z","shell.execute_reply":"2024-09-29T09:25:46.227715Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"def makeDictionary(queryLink, poslink, neglink):\n    result_list = []\n\n    # Read all lines from the query, positive, and negative files once\n    with open(queryLink) as file_in:\n        queries = file_in.readlines()\n    \n    with open(poslink) as pos_file:\n        pos_lines = pos_file.readlines()\n    \n    with open(neglink) as neg_file:\n        neg_lines = neg_file.readlines()\n\n    for i, line in enumerate(queries):\n        dic = {}\n        dic[\"query\"] = line.strip()  # Remove any newline characters\n        # Ensure that there are enough positive and negative samples\n        pos_samples = random.sample(pos_lines, min(10, len(pos_lines)))\n        neg_samples = random.sample(neg_lines, min(10, len(neg_lines)))\n        dic[\"pos\"] = pos_samples\n        dic[\"neg\"] = neg_samples\n        result_list.append(dic)\n\n    return result_list\n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T09:26:07.439311Z","iopub.execute_input":"2024-09-29T09:26:07.439753Z","iopub.status.idle":"2024-09-29T09:26:07.447888Z","shell.execute_reply.started":"2024-09-29T09:26:07.439710Z","shell.execute_reply":"2024-09-29T09:26:07.446607Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"def makeDictionary(queryLink,poslink,neglink):\n    dic={}\n    list=[]\n    with open(queryLink) as file_in:\n         for i,line in enumerate(file_in):\n                dic[\"query\"]=line\n                open(poslink) as pos\n                del pos[i]\n                dic[\"pos\"]=random.sample(pos, 10)\n                neg=open(neglink)\n                dic[\"neg\"]=random.sample(neg, 10)\n                list.append(dic)\n    return list","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def dicts_to_jsonl(data_list: list, filename: str, compress: bool = True) -> None:\n    data=data_list\n    sjsonl = '.jsonl'\n    sgz = '.gz'\n\n    # Check filename\n\n    if not filename.endswith(sjsonl):\n        filename = filename + sjsonl\n\n    # Save data\n    \n    if compress:\n        filename = filename + sgz\n        with gzip.open(filename, 'w') as compressed:\n            for ddict in data:\n                jout = json.dumps(ddict) + '\\n'\n                jout = jout.encode('utf-8')\n                compressed.write(jout)\n    else:\n        with open(filename, 'w') as out:\n            for ddict in data:\n                jout = json.dumps(ddict) + '\\n'\n                out.write(jout)","metadata":{"execution":{"iopub.status.busy":"2024-09-29T09:26:52.847631Z","iopub.execute_input":"2024-09-29T09:26:52.848040Z","iopub.status.idle":"2024-09-29T09:26:52.855706Z","shell.execute_reply.started":"2024-09-29T09:26:52.848000Z","shell.execute_reply":"2024-09-29T09:26:52.854617Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"#input\ndeleteLine(\"/kaggle/input/enhancers/B_Enhancer.txt\",\"B_Enhancer.txt\")\ndeleteLine(\"/kaggle/input/enhancers/B_NonEnhancer.txt\",\"B_NonEnhancer.txt\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T09:27:01.667978Z","iopub.execute_input":"2024-09-29T09:27:01.668358Z","iopub.status.idle":"2024-09-29T09:27:01.725138Z","shell.execute_reply.started":"2024-09-29T09:27:01.668318Z","shell.execute_reply":"2024-09-29T09:27:01.723922Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"done\ndone\n","output_type":"stream"}]},{"cell_type":"code","source":"result=makeDictionary(\"/kaggle/working/B_Enhancer.txt\",\"/kaggle/working/B_Enhancer.txt\",\"/kaggle/working/B_NonEnhancer.txt\")\ndicts_to_jsonl(result, \"B_Enhancer\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-29T09:31:37.068157Z","iopub.execute_input":"2024-09-29T09:31:37.068625Z","iopub.status.idle":"2024-09-29T09:31:41.407663Z","shell.execute_reply.started":"2024-09-29T09:31:37.068583Z","shell.execute_reply":"2024-09-29T09:31:41.406643Z"},"trusted":true},"execution_count":7,"outputs":[]}]}